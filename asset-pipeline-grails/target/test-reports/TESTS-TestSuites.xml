<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="0" name="DirectiveProcessorSpec" package="asset.pipeline" skipped="0" tests="8" time="0.415" timestamp="2016-04-22T16:46:21">
      <properties />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="gets entire tree when required" time="0.127" />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="gets dependency list flattened with all files" time="0.014" />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="gets dependency list flattened with all files from require_full_tree" time="0.062" />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="evaluates GString directives if detected" time="0.042" />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="gets dependency list order correct" time="0.029" />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="gets dependency list order correct when multiple dependencies are defined in one directive" time="0.09" />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="gets dependency list with tree directive that has an absolute and relative path" time="0.008" />

      <testcase classname="asset.pipeline.DirectiveProcessorSpec" name="gets dependency list with full_tree directive that has an absolute and relative path" time="0.034" />

      <system-out><![CDATA[--Output from gets entire tree when required--
--Output from gets dependency list flattened with all files--
[[path:asset-pipeline/test/test.js, encoding:null], [path:asset-pipeline/test/libs/file_a.js, encoding:null], [path:asset-pipeline/test/libs/file_c.js, encoding:null], [path:asset-pipeline/test/libs/file_b.js, encoding:null], [path:asset-pipeline/test/libs/subset/subset_a.js, encoding:null]]
--Output from gets dependency list flattened with all files from require_full_tree--
[[path:asset-pipeline/test/test_full_tree.js, encoding:null], [path:asset-pipeline/test/libs/file_a.js, encoding:null], [path:asset-pipeline/test/libs/file_c.js, encoding:null], [path:asset-pipeline/test/libs/file_b.js, encoding:null], [path:asset-pipeline/test/libs/subset/subset_a.js, encoding:null]]
--Output from evaluates GString directives if detected--
[[path:asset-pipeline/test/gstringtest2.js, encoding:null], [path:asset-pipeline/test/gstringtest.js, encoding:null]]
--Output from gets dependency list order correct--
--Output from gets dependency list order correct when multiple dependencies are defined in one directive--
--Output from gets dependency list with tree directive that has an absolute and relative path--
--Output from gets dependency list with full_tree directive that has an absolute and relative path--
]]></system-out>

      <system-err><![CDATA[--Output from gets entire tree when required--
--Output from gets dependency list flattened with all files--
--Output from gets dependency list flattened with all files from require_full_tree--
--Output from evaluates GString directives if detected--
--Output from gets dependency list order correct--
--Output from gets dependency list order correct when multiple dependencies are defined in one directive--
--Output from gets dependency list with tree directive that has an absolute and relative path--
--Output from gets dependency list with full_tree directive that has an absolute and relative path--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="1" name="HelperGetsCssAssetSpec" package="asset.pipeline" skipped="0" tests="3" time="0.03" timestamp="2016-04-22T16:46:21">
      <properties />

      <testcase classname="asset.pipeline.HelperGetsCssAssetSpec" name="gets a css asset from a uri" time="0.009" />

      <testcase classname="asset.pipeline.HelperGetsCssAssetSpec" name="gets a css asset given its uri and contentType" time="0.008" />

      <testcase classname="asset.pipeline.HelperGetsCssAssetSpec" name="gets a css asset given its uri and file extension" time="0.007" />

      <system-out><![CDATA[--Output from gets a css asset from a uri--
--Output from gets a css asset given its uri and contentType--
--Output from gets a css asset given its uri and file extension--
]]></system-out>

      <system-err><![CDATA[--Output from gets a css asset from a uri--
--Output from gets a css asset given its uri and contentType--
--Output from gets a css asset given its uri and file extension--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="2" name="HelperGetsJavascriptAssetSpec" package="asset.pipeline" skipped="0" tests="7" time="0.069" timestamp="2016-04-22T16:46:21">
      <properties />

      <testcase classname="asset.pipeline.HelperGetsJavascriptAssetSpec" name="gets a javascript file from a uri" time="0.006" />

      <testcase classname="asset.pipeline.HelperGetsJavascriptAssetSpec" name="gets a javascript file given a uri and content type application/javascript" time="0.007" />

      <testcase classname="asset.pipeline.HelperGetsJavascriptAssetSpec" name="gets a javascript file given a uri and content type application/x-javascript" time="0.006" />

      <testcase classname="asset.pipeline.HelperGetsJavascriptAssetSpec" name="gets a javascript file given a uri and content type text/javascript" time="0.005" />

      <testcase classname="asset.pipeline.HelperGetsJavascriptAssetSpec" name="gets a javascript file given a uri and extension()" time="0.006" />

      <testcase classname="asset.pipeline.HelperGetsJavascriptAssetSpec" name="gets a javascript file of different extension given a uri and content type" time="0.007" />

      <testcase classname="asset.pipeline.HelperGetsJavascriptAssetSpec" name="returns null if javascript file doesn&apos;t exist" time="0.026" />

      <system-out><![CDATA[--Output from gets a javascript file from a uri--
--Output from gets a javascript file given a uri and content type application/javascript--
--Output from gets a javascript file given a uri and content type application/x-javascript--
--Output from gets a javascript file given a uri and content type text/javascript--
--Output from gets a javascript file given a uri and extension()--
--Output from gets a javascript file of different extension given a uri and content type--
--Output from returns null if javascript file doesn't exist--
]]></system-out>

      <system-err><![CDATA[--Output from gets a javascript file from a uri--
--Output from gets a javascript file given a uri and content type application/javascript--
--Output from gets a javascript file given a uri and content type application/x-javascript--
--Output from gets a javascript file given a uri and content type text/javascript--
--Output from gets a javascript file given a uri and extension()--
--Output from gets a javascript file of different extension given a uri and content type--
--Output from returns null if javascript file doesn't exist--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="3" name="AssetResourceLocatorSpec" package="asset.pipeline.grails" skipped="0" tests="2" time="0.061" timestamp="2016-04-22T16:46:21">
      <properties />

      <testcase classname="asset.pipeline.grails.AssetResourceLocatorSpec" name="finds assets when calling for resource in dev mode" time="0.023" />

      <testcase classname="asset.pipeline.grails.AssetResourceLocatorSpec" name="finds asset of image type when calling for resource in dev mode" time="0.033" />

      <system-out><![CDATA[--Output from finds assets when calling for resource in dev mode--
--Output from finds asset of image type when calling for resource in dev mode--
]]></system-out>

      <system-err><![CDATA[--Output from finds assets when calling for resource in dev mode--
--Output from finds asset of image type when calling for resource in dev mode--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="4" name="CachingLinkGeneratorSpec" package="asset.pipeline.grails" skipped="0" tests="4" time="0.064" timestamp="2016-04-22T16:46:21">
      <properties />

      <testcase classname="asset.pipeline.grails.CachingLinkGeneratorSpec" name="finds assets when calling for resource in dev mode" time="0.034" />

      <testcase classname="asset.pipeline.grails.CachingLinkGeneratorSpec" name="finds assets with absolute path when calling for resource in dev mode" time="0.008" />

      <testcase classname="asset.pipeline.grails.CachingLinkGeneratorSpec" name="finds asset in precompiled (prod) mode" time="0.01" />

      <testcase classname="asset.pipeline.grails.CachingLinkGeneratorSpec" name="falls back to standard resource lookup if not found in asset pipeline" time="0.008" />

      <system-out><![CDATA[--Output from finds assets when calling for resource in dev mode--
--Output from finds assets with absolute path when calling for resource in dev mode--
--Output from finds asset in precompiled (prod) mode--
--Output from falls back to standard resource lookup if not found in asset pipeline--
]]></system-out>

      <system-err><![CDATA[--Output from finds assets when calling for resource in dev mode--
--Output from finds assets with absolute path when calling for resource in dev mode--
--Output from finds asset in precompiled (prod) mode--
--Output from falls back to standard resource lookup if not found in asset pipeline--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="5" name="LinkGeneratorSpec" package="asset.pipeline.grails" skipped="0" tests="5" time="0.051" timestamp="2016-04-22T16:46:21">
      <properties />

      <testcase classname="asset.pipeline.grails.LinkGeneratorSpec" name="finds assets when calling for resource in dev mode" time="0.016" />

      <testcase classname="asset.pipeline.grails.LinkGeneratorSpec" name="finds assets with absolute path when calling for resource in dev mode" time="0.013" />

      <testcase classname="asset.pipeline.grails.LinkGeneratorSpec" name="find asset path only with no file" time="0.006" />

      <testcase classname="asset.pipeline.grails.LinkGeneratorSpec" name="finds asset in precompiled (prod) mode" time="0.006" />

      <testcase classname="asset.pipeline.grails.LinkGeneratorSpec" name="falls back to standard resource lookup if not found in asset pipeline" time="0.006" />

      <system-out><![CDATA[--Output from finds assets when calling for resource in dev mode--
--Output from finds assets with absolute path when calling for resource in dev mode--
--Output from find asset path only with no file--
--Output from finds asset in precompiled (prod) mode--
--Output from falls back to standard resource lookup if not found in asset pipeline--
]]></system-out>

      <system-err><![CDATA[--Output from finds assets when calling for resource in dev mode--
--Output from finds assets with absolute path when calling for resource in dev mode--
--Output from find asset path only with no file--
--Output from finds asset in precompiled (prod) mode--
--Output from falls back to standard resource lookup if not found in asset pipeline--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="6" name="CssProcessorSpec" package="asset.pipeline.processors" skipped="0" tests="2" time="0.116" timestamp="2016-04-22T16:46:21">
      <properties />

      <testcase classname="asset.pipeline.processors.CssProcessorSpec" name="replaces image urls with relative paths" time="0.071" />

      <testcase classname="asset.pipeline.processors.CssProcessorSpec" name="replaces image urls with relative paths and cache digest names in precompiler mode" time="0.044" />

      <system-out><![CDATA[--Output from replaces image urls with relative paths--
--Output from replaces image urls with relative paths and cache digest names in precompiler mode--
]]></system-out>

      <system-err><![CDATA[--Output from replaces image urls with relative paths--
--Output from replaces image urls with relative paths and cache digest names in precompiler mode--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="7" name="AssetMethodTagLibSpec" package="asset.pipeline.grails" skipped="0" tests="1" time="3.907" timestamp="2016-04-22T16:46:08">
      <properties />

      <testcase classname="asset.pipeline.grails.AssetMethodTagLibSpec" name="should return assetPath" time="3.782" />

      <system-out><![CDATA[--Output from should return assetPath--
]]></system-out>

      <system-err><![CDATA[--Output from should return assetPath--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="8" name="AssetProcessorServiceSpec" package="asset.pipeline.grails" skipped="0" tests="4" time="0.626" timestamp="2016-04-22T16:46:13">
      <properties />

      <testcase classname="asset.pipeline.grails.AssetProcessorServiceSpec" name="asset mapping can be configured" time="0.374" />

      <testcase classname="asset.pipeline.grails.AssetProcessorServiceSpec" name="can get flattened dependency list" time="0.204" />

      <testcase classname="asset.pipeline.grails.AssetProcessorServiceSpec" name="can serve unprocessed asset for dev debug" time="0.009" />

      <testcase classname="asset.pipeline.grails.AssetProcessorServiceSpec" name="can serve compiled assets" time="0.017" />

      <system-out><![CDATA[--Output from asset mapping can be configured--
--Output from can get flattened dependency list--
--Output from can serve unprocessed asset for dev debug--
--Output from can serve compiled assets--
]]></system-out>

      <system-err><![CDATA[--Output from asset mapping can be configured--
--Output from can get flattened dependency list--
--Output from can serve unprocessed asset for dev debug--
--Output from can serve compiled assets--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="davids-macbook.local" id="9" name="AssetsTagLibSpec" package="asset.pipeline.grails" skipped="0" tests="18" time="2.081" timestamp="2016-04-22T16:46:14">
      <properties />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return assetPath" time="0.379" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return javascript link tag when debugMode is off" time="0.108" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should always return javascript link tag when bundle attr is &apos;true&apos;" time="0.022" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return javascript link tag with seperated files when debugMode is on" time="0.048" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return stylesheet link tag when debugMode is off" time="0.024" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should always return stylesheet link tag when bundle attr is &apos;true&apos;" time="0.013" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return stylesheet link tag with seperated files when debugMode is on" time="0.022" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return image tag" time="0.022" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return image tag with absolute path" time="0.017" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should return link tag" time="0.014" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="test if asset path exists in dev mode" time="0.03" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="test if asset path is missing in dev mode" time="0.017" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="test if asset path exists in dev mode and closure renders the body" time="0.259" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="test if asset path is missing in dev mode and closure doesn&apos;t render the body" time="0.254" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="test if asset path exists in prod mode" time="0.018" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="asset path should not exist in dev mode" time="0.027" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should render deferred scripts" time="0.48" />

      <testcase classname="asset.pipeline.grails.AssetsTagLibSpec" name="should render deferred scripts and evaluate nested groovy expressions" time="0.306" />

      <system-out><![CDATA[--Output from should return assetPath--
--Output from should return javascript link tag when debugMode is off--
--Output from should always return javascript link tag when bundle attr is 'true'--
--Output from should return javascript link tag with seperated files when debugMode is on--
--Output from should return stylesheet link tag when debugMode is off--
--Output from should always return stylesheet link tag when bundle attr is 'true'--
--Output from should return stylesheet link tag with seperated files when debugMode is on--
--Output from should return image tag--
--Output from should return image tag with absolute path--
--Output from should return link tag--
--Output from test if asset path exists in dev mode--
--Output from test if asset path is missing in dev mode--
--Output from test if asset path exists in dev mode and closure renders the body--
--Output from test if asset path is missing in dev mode and closure doesn't render the body--
--Output from test if asset path exists in prod mode--
--Output from asset path should not exist in dev mode--
--Output from should render deferred scripts--
--Output from should render deferred scripts and evaluate nested groovy expressions--
]]></system-out>

      <system-err><![CDATA[--Output from should return assetPath--
--Output from should return javascript link tag when debugMode is off--
--Output from should always return javascript link tag when bundle attr is 'true'--
--Output from should return javascript link tag with seperated files when debugMode is on--
--Output from should return stylesheet link tag when debugMode is off--
--Output from should always return stylesheet link tag when bundle attr is 'true'--
--Output from should return stylesheet link tag with seperated files when debugMode is on--
--Output from should return image tag--
--Output from should return image tag with absolute path--
--Output from should return link tag--
--Output from test if asset path exists in dev mode--
--Output from test if asset path is missing in dev mode--
--Output from test if asset path exists in dev mode and closure renders the body--
--Output from test if asset path is missing in dev mode and closure doesn't render the body--
--Output from test if asset path exists in prod mode--
--Output from asset path should not exist in dev mode--
--Output from should render deferred scripts--
--Output from should render deferred scripts and evaluate nested groovy expressions--
]]></system-err>

  </testsuite>
</testsuites>
